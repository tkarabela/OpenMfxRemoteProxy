// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGES_OPENMFXREMOTEPROXY_H_
#define FLATBUFFERS_GENERATED_MESSAGES_OPENMFXREMOTEPROXY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace OpenMfxRemoteProxy {

struct OfxPropertyIntNValue;
struct OfxPropertyIntNValueBuilder;

struct OfxPropertyFloatNValue;
struct OfxPropertyFloatNValueBuilder;

struct OfxPropertyStringNValue;
struct OfxPropertyStringNValueBuilder;

struct OfxPropertyPointerValue;
struct OfxPropertyPointerValueBuilder;

struct OfxProperty;
struct OfxPropertyBuilder;

struct OfxAttribute;
struct OfxAttributeBuilder;

struct OfxMesh;
struct OfxMeshBuilder;

struct OfxParameter;
struct OfxParameterBuilder;

struct OfxPlugin;
struct OfxPluginBuilder;

struct OfxBundle;
struct OfxBundleBuilder;

struct OpenMfxRemoteProxyDescribe;
struct OpenMfxRemoteProxyDescribeBuilder;

enum OfxPropertyValue : uint8_t {
  OfxPropertyValue_NONE = 0,
  OfxPropertyValue_OfxPropertyIntNValue = 1,
  OfxPropertyValue_OfxPropertyFloatNValue = 2,
  OfxPropertyValue_OfxPropertyStringNValue = 3,
  OfxPropertyValue_OfxPropertyPointerValue = 4,
  OfxPropertyValue_MIN = OfxPropertyValue_NONE,
  OfxPropertyValue_MAX = OfxPropertyValue_OfxPropertyPointerValue
};

inline const OfxPropertyValue (&EnumValuesOfxPropertyValue())[5] {
  static const OfxPropertyValue values[] = {
    OfxPropertyValue_NONE,
    OfxPropertyValue_OfxPropertyIntNValue,
    OfxPropertyValue_OfxPropertyFloatNValue,
    OfxPropertyValue_OfxPropertyStringNValue,
    OfxPropertyValue_OfxPropertyPointerValue
  };
  return values;
}

inline const char * const *EnumNamesOfxPropertyValue() {
  static const char * const names[6] = {
    "NONE",
    "OfxPropertyIntNValue",
    "OfxPropertyFloatNValue",
    "OfxPropertyStringNValue",
    "OfxPropertyPointerValue",
    nullptr
  };
  return names;
}

inline const char *EnumNameOfxPropertyValue(OfxPropertyValue e) {
  if (flatbuffers::IsOutRange(e, OfxPropertyValue_NONE, OfxPropertyValue_OfxPropertyPointerValue)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOfxPropertyValue()[index];
}

template<typename T> struct OfxPropertyValueTraits {
  static const OfxPropertyValue enum_value = OfxPropertyValue_NONE;
};

template<> struct OfxPropertyValueTraits<OpenMfxRemoteProxy::OfxPropertyIntNValue> {
  static const OfxPropertyValue enum_value = OfxPropertyValue_OfxPropertyIntNValue;
};

template<> struct OfxPropertyValueTraits<OpenMfxRemoteProxy::OfxPropertyFloatNValue> {
  static const OfxPropertyValue enum_value = OfxPropertyValue_OfxPropertyFloatNValue;
};

template<> struct OfxPropertyValueTraits<OpenMfxRemoteProxy::OfxPropertyStringNValue> {
  static const OfxPropertyValue enum_value = OfxPropertyValue_OfxPropertyStringNValue;
};

template<> struct OfxPropertyValueTraits<OpenMfxRemoteProxy::OfxPropertyPointerValue> {
  static const OfxPropertyValue enum_value = OfxPropertyValue_OfxPropertyPointerValue;
};

bool VerifyOfxPropertyValue(flatbuffers::Verifier &verifier, const void *obj, OfxPropertyValue type);
bool VerifyOfxPropertyValueVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct OfxPropertyIntNValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPropertyIntNValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<int32_t> *values() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct OfxPropertyIntNValueBuilder {
  typedef OfxPropertyIntNValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<int32_t>> values) {
    fbb_.AddOffset(OfxPropertyIntNValue::VT_VALUES, values);
  }
  explicit OfxPropertyIntNValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxPropertyIntNValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxPropertyIntNValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxPropertyIntNValue> CreateOfxPropertyIntNValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> values = 0) {
  OfxPropertyIntNValueBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxPropertyIntNValue> CreateOfxPropertyIntNValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<int32_t>(*values) : 0;
  return OpenMfxRemoteProxy::CreateOfxPropertyIntNValue(
      _fbb,
      values__);
}

struct OfxPropertyFloatNValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPropertyFloatNValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<double> *values() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct OfxPropertyFloatNValueBuilder {
  typedef OfxPropertyFloatNValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<double>> values) {
    fbb_.AddOffset(OfxPropertyFloatNValue::VT_VALUES, values);
  }
  explicit OfxPropertyFloatNValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxPropertyFloatNValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxPropertyFloatNValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxPropertyFloatNValue> CreateOfxPropertyFloatNValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> values = 0) {
  OfxPropertyFloatNValueBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxPropertyFloatNValue> CreateOfxPropertyFloatNValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<double>(*values) : 0;
  return OpenMfxRemoteProxy::CreateOfxPropertyFloatNValue(
      _fbb,
      values__);
}

struct OfxPropertyStringNValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPropertyStringNValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfStrings(values()) &&
           verifier.EndTable();
  }
};

struct OfxPropertyStringNValueBuilder {
  typedef OfxPropertyStringNValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> values) {
    fbb_.AddOffset(OfxPropertyStringNValue::VT_VALUES, values);
  }
  explicit OfxPropertyStringNValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxPropertyStringNValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxPropertyStringNValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxPropertyStringNValue> CreateOfxPropertyStringNValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> values = 0) {
  OfxPropertyStringNValueBuilder builder_(_fbb);
  builder_.add_values(values);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxPropertyStringNValue> CreateOfxPropertyStringNValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *values = nullptr) {
  auto values__ = values ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*values) : 0;
  return OpenMfxRemoteProxy::CreateOfxPropertyStringNValue(
      _fbb,
      values__);
}

struct OfxPropertyPointerValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPropertyPointerValueBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFER = 4
  };
  const flatbuffers::Vector<uint8_t> *buffer() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BUFFER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           verifier.EndTable();
  }
};

struct OfxPropertyPointerValueBuilder {
  typedef OfxPropertyPointerValue Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer) {
    fbb_.AddOffset(OfxPropertyPointerValue::VT_BUFFER, buffer);
  }
  explicit OfxPropertyPointerValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxPropertyPointerValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxPropertyPointerValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxPropertyPointerValue> CreateOfxPropertyPointerValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> buffer = 0) {
  OfxPropertyPointerValueBuilder builder_(_fbb);
  builder_.add_buffer(buffer);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxPropertyPointerValue> CreateOfxPropertyPointerValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *buffer = nullptr) {
  auto buffer__ = buffer ? _fbb.CreateVector<uint8_t>(*buffer) : 0;
  return OpenMfxRemoteProxy::CreateOfxPropertyPointerValue(
      _fbb,
      buffer__);
}

struct OfxProperty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE_TYPE = 6,
    VT_VALUE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  OpenMfxRemoteProxy::OfxPropertyValue value_type() const {
    return static_cast<OpenMfxRemoteProxy::OfxPropertyValue>(GetField<uint8_t>(VT_VALUE_TYPE, 0));
  }
  const void *value() const {
    return GetPointer<const void *>(VT_VALUE);
  }
  template<typename T> const T *value_as() const;
  const OpenMfxRemoteProxy::OfxPropertyIntNValue *value_as_OfxPropertyIntNValue() const {
    return value_type() == OpenMfxRemoteProxy::OfxPropertyValue_OfxPropertyIntNValue ? static_cast<const OpenMfxRemoteProxy::OfxPropertyIntNValue *>(value()) : nullptr;
  }
  const OpenMfxRemoteProxy::OfxPropertyFloatNValue *value_as_OfxPropertyFloatNValue() const {
    return value_type() == OpenMfxRemoteProxy::OfxPropertyValue_OfxPropertyFloatNValue ? static_cast<const OpenMfxRemoteProxy::OfxPropertyFloatNValue *>(value()) : nullptr;
  }
  const OpenMfxRemoteProxy::OfxPropertyStringNValue *value_as_OfxPropertyStringNValue() const {
    return value_type() == OpenMfxRemoteProxy::OfxPropertyValue_OfxPropertyStringNValue ? static_cast<const OpenMfxRemoteProxy::OfxPropertyStringNValue *>(value()) : nullptr;
  }
  const OpenMfxRemoteProxy::OfxPropertyPointerValue *value_as_OfxPropertyPointerValue() const {
    return value_type() == OpenMfxRemoteProxy::OfxPropertyValue_OfxPropertyPointerValue ? static_cast<const OpenMfxRemoteProxy::OfxPropertyPointerValue *>(value()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE_TYPE, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           VerifyOfxPropertyValue(verifier, value(), value_type()) &&
           verifier.EndTable();
  }
};

template<> inline const OpenMfxRemoteProxy::OfxPropertyIntNValue *OfxProperty::value_as<OpenMfxRemoteProxy::OfxPropertyIntNValue>() const {
  return value_as_OfxPropertyIntNValue();
}

template<> inline const OpenMfxRemoteProxy::OfxPropertyFloatNValue *OfxProperty::value_as<OpenMfxRemoteProxy::OfxPropertyFloatNValue>() const {
  return value_as_OfxPropertyFloatNValue();
}

template<> inline const OpenMfxRemoteProxy::OfxPropertyStringNValue *OfxProperty::value_as<OpenMfxRemoteProxy::OfxPropertyStringNValue>() const {
  return value_as_OfxPropertyStringNValue();
}

template<> inline const OpenMfxRemoteProxy::OfxPropertyPointerValue *OfxProperty::value_as<OpenMfxRemoteProxy::OfxPropertyPointerValue>() const {
  return value_as_OfxPropertyPointerValue();
}

struct OfxPropertyBuilder {
  typedef OfxProperty Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(OfxProperty::VT_NAME, name);
  }
  void add_value_type(OpenMfxRemoteProxy::OfxPropertyValue value_type) {
    fbb_.AddElement<uint8_t>(OfxProperty::VT_VALUE_TYPE, static_cast<uint8_t>(value_type), 0);
  }
  void add_value(flatbuffers::Offset<void> value) {
    fbb_.AddOffset(OfxProperty::VT_VALUE, value);
  }
  explicit OfxPropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxProperty>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxProperty> CreateOfxProperty(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    OpenMfxRemoteProxy::OfxPropertyValue value_type = OpenMfxRemoteProxy::OfxPropertyValue_NONE,
    flatbuffers::Offset<void> value = 0) {
  OfxPropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_value_type(value_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxProperty> CreateOfxPropertyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    OpenMfxRemoteProxy::OfxPropertyValue value_type = OpenMfxRemoteProxy::OfxPropertyValue_NONE,
    flatbuffers::Offset<void> value = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return OpenMfxRemoteProxy::CreateOfxProperty(
      _fbb,
      name__,
      value_type,
      value);
}

struct OfxAttribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxAttributeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *>(VT_PROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct OfxAttributeBuilder {
  typedef OfxAttribute Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties) {
    fbb_.AddOffset(OfxAttribute::VT_PROPERTIES, properties);
  }
  explicit OfxAttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxAttribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxAttribute>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxAttribute> CreateOfxAttribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties = 0) {
  OfxAttributeBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxAttribute> CreateOfxAttributeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>(*properties) : 0;
  return OpenMfxRemoteProxy::CreateOfxAttribute(
      _fbb,
      properties__);
}

struct OfxMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxMeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4,
    VT_ATTRIBUTES = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *>(VT_PROPERTIES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>> *attributes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>> *>(VT_ATTRIBUTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           verifier.VerifyVectorOfTables(attributes()) &&
           verifier.EndTable();
  }
};

struct OfxMeshBuilder {
  typedef OfxMesh Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties) {
    fbb_.AddOffset(OfxMesh::VT_PROPERTIES, properties);
  }
  void add_attributes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>>> attributes) {
    fbb_.AddOffset(OfxMesh::VT_ATTRIBUTES, attributes);
  }
  explicit OfxMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxMesh> CreateOfxMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>>> attributes = 0) {
  OfxMeshBuilder builder_(_fbb);
  builder_.add_attributes(attributes);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxMesh> CreateOfxMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties = nullptr,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>> *attributes = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>(*properties) : 0;
  auto attributes__ = attributes ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxAttribute>>(*attributes) : 0;
  return OpenMfxRemoteProxy::CreateOfxMesh(
      _fbb,
      properties__,
      attributes__);
}

struct OfxParameter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxParameterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *>(VT_PROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct OfxParameterBuilder {
  typedef OfxParameter Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties) {
    fbb_.AddOffset(OfxParameter::VT_PROPERTIES, properties);
  }
  explicit OfxParameterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxParameter> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxParameter>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxParameter> CreateOfxParameter(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>> properties = 0) {
  OfxParameterBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxParameter> CreateOfxParameterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>> *properties = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxProperty>>(*properties) : 0;
  return OpenMfxRemoteProxy::CreateOfxParameter(
      _fbb,
      properties__);
}

struct OfxPlugin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxPluginBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLUGINAPI = 4,
    VT_APIVERSION = 6,
    VT_PLUGINIDENTIFIER = 8,
    VT_PLUGINVERSIONMAJOR = 10,
    VT_PLUGINVERSIONMINOR = 12
  };
  const flatbuffers::String *pluginApi() const {
    return GetPointer<const flatbuffers::String *>(VT_PLUGINAPI);
  }
  int32_t apiVersion() const {
    return GetField<int32_t>(VT_APIVERSION, 0);
  }
  const flatbuffers::String *pluginIdentifier() const {
    return GetPointer<const flatbuffers::String *>(VT_PLUGINIDENTIFIER);
  }
  int32_t pluginVersionMajor() const {
    return GetField<int32_t>(VT_PLUGINVERSIONMAJOR, 0);
  }
  int32_t pluginVersionMinor() const {
    return GetField<int32_t>(VT_PLUGINVERSIONMINOR, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLUGINAPI) &&
           verifier.VerifyString(pluginApi()) &&
           VerifyField<int32_t>(verifier, VT_APIVERSION, 4) &&
           VerifyOffset(verifier, VT_PLUGINIDENTIFIER) &&
           verifier.VerifyString(pluginIdentifier()) &&
           VerifyField<int32_t>(verifier, VT_PLUGINVERSIONMAJOR, 4) &&
           VerifyField<int32_t>(verifier, VT_PLUGINVERSIONMINOR, 4) &&
           verifier.EndTable();
  }
};

struct OfxPluginBuilder {
  typedef OfxPlugin Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pluginApi(flatbuffers::Offset<flatbuffers::String> pluginApi) {
    fbb_.AddOffset(OfxPlugin::VT_PLUGINAPI, pluginApi);
  }
  void add_apiVersion(int32_t apiVersion) {
    fbb_.AddElement<int32_t>(OfxPlugin::VT_APIVERSION, apiVersion, 0);
  }
  void add_pluginIdentifier(flatbuffers::Offset<flatbuffers::String> pluginIdentifier) {
    fbb_.AddOffset(OfxPlugin::VT_PLUGINIDENTIFIER, pluginIdentifier);
  }
  void add_pluginVersionMajor(int32_t pluginVersionMajor) {
    fbb_.AddElement<int32_t>(OfxPlugin::VT_PLUGINVERSIONMAJOR, pluginVersionMajor, 0);
  }
  void add_pluginVersionMinor(int32_t pluginVersionMinor) {
    fbb_.AddElement<int32_t>(OfxPlugin::VT_PLUGINVERSIONMINOR, pluginVersionMinor, 0);
  }
  explicit OfxPluginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxPlugin> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxPlugin>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxPlugin> CreateOfxPlugin(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> pluginApi = 0,
    int32_t apiVersion = 0,
    flatbuffers::Offset<flatbuffers::String> pluginIdentifier = 0,
    int32_t pluginVersionMajor = 0,
    int32_t pluginVersionMinor = 0) {
  OfxPluginBuilder builder_(_fbb);
  builder_.add_pluginVersionMinor(pluginVersionMinor);
  builder_.add_pluginVersionMajor(pluginVersionMajor);
  builder_.add_pluginIdentifier(pluginIdentifier);
  builder_.add_apiVersion(apiVersion);
  builder_.add_pluginApi(pluginApi);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxPlugin> CreateOfxPluginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *pluginApi = nullptr,
    int32_t apiVersion = 0,
    const char *pluginIdentifier = nullptr,
    int32_t pluginVersionMajor = 0,
    int32_t pluginVersionMinor = 0) {
  auto pluginApi__ = pluginApi ? _fbb.CreateString(pluginApi) : 0;
  auto pluginIdentifier__ = pluginIdentifier ? _fbb.CreateString(pluginIdentifier) : 0;
  return OpenMfxRemoteProxy::CreateOfxPlugin(
      _fbb,
      pluginApi__,
      apiVersion,
      pluginIdentifier__,
      pluginVersionMajor,
      pluginVersionMinor);
}

struct OfxBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OfxBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLUGINS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>> *plugins() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>> *>(VT_PLUGINS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLUGINS) &&
           verifier.VerifyVector(plugins()) &&
           verifier.VerifyVectorOfTables(plugins()) &&
           verifier.EndTable();
  }
};

struct OfxBundleBuilder {
  typedef OfxBundle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_plugins(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>>> plugins) {
    fbb_.AddOffset(OfxBundle::VT_PLUGINS, plugins);
  }
  explicit OfxBundleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OfxBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OfxBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<OfxBundle> CreateOfxBundle(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>>> plugins = 0) {
  OfxBundleBuilder builder_(_fbb);
  builder_.add_plugins(plugins);
  return builder_.Finish();
}

inline flatbuffers::Offset<OfxBundle> CreateOfxBundleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>> *plugins = nullptr) {
  auto plugins__ = plugins ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxPlugin>>(*plugins) : 0;
  return OpenMfxRemoteProxy::CreateOfxBundle(
      _fbb,
      plugins__);
}

struct OpenMfxRemoteProxyDescribe FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OpenMfxRemoteProxyDescribeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLUGIN_NAME = 4,
    VT_INPUTS = 6,
    VT_PARAMETERS = 8
  };
  const flatbuffers::String *plugin_name() const {
    return GetPointer<const flatbuffers::String *>(VT_PLUGIN_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>> *inputs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>> *parameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>> *>(VT_PARAMETERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLUGIN_NAME) &&
           verifier.VerifyString(plugin_name()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           verifier.VerifyVectorOfTables(inputs()) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfTables(parameters()) &&
           verifier.EndTable();
  }
};

struct OpenMfxRemoteProxyDescribeBuilder {
  typedef OpenMfxRemoteProxyDescribe Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_plugin_name(flatbuffers::Offset<flatbuffers::String> plugin_name) {
    fbb_.AddOffset(OpenMfxRemoteProxyDescribe::VT_PLUGIN_NAME, plugin_name);
  }
  void add_inputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>>> inputs) {
    fbb_.AddOffset(OpenMfxRemoteProxyDescribe::VT_INPUTS, inputs);
  }
  void add_parameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>>> parameters) {
    fbb_.AddOffset(OpenMfxRemoteProxyDescribe::VT_PARAMETERS, parameters);
  }
  explicit OpenMfxRemoteProxyDescribeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OpenMfxRemoteProxyDescribe> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OpenMfxRemoteProxyDescribe>(end);
    return o;
  }
};

inline flatbuffers::Offset<OpenMfxRemoteProxyDescribe> CreateOpenMfxRemoteProxyDescribe(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> plugin_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>>> inputs = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>>> parameters = 0) {
  OpenMfxRemoteProxyDescribeBuilder builder_(_fbb);
  builder_.add_parameters(parameters);
  builder_.add_inputs(inputs);
  builder_.add_plugin_name(plugin_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<OpenMfxRemoteProxyDescribe> CreateOpenMfxRemoteProxyDescribeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *plugin_name = nullptr,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>> *inputs = nullptr,
    const std::vector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>> *parameters = nullptr) {
  auto plugin_name__ = plugin_name ? _fbb.CreateString(plugin_name) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxMesh>>(*inputs) : 0;
  auto parameters__ = parameters ? _fbb.CreateVector<flatbuffers::Offset<OpenMfxRemoteProxy::OfxParameter>>(*parameters) : 0;
  return OpenMfxRemoteProxy::CreateOpenMfxRemoteProxyDescribe(
      _fbb,
      plugin_name__,
      inputs__,
      parameters__);
}

inline bool VerifyOfxPropertyValue(flatbuffers::Verifier &verifier, const void *obj, OfxPropertyValue type) {
  switch (type) {
    case OfxPropertyValue_NONE: {
      return true;
    }
    case OfxPropertyValue_OfxPropertyIntNValue: {
      auto ptr = reinterpret_cast<const OpenMfxRemoteProxy::OfxPropertyIntNValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OfxPropertyValue_OfxPropertyFloatNValue: {
      auto ptr = reinterpret_cast<const OpenMfxRemoteProxy::OfxPropertyFloatNValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OfxPropertyValue_OfxPropertyStringNValue: {
      auto ptr = reinterpret_cast<const OpenMfxRemoteProxy::OfxPropertyStringNValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case OfxPropertyValue_OfxPropertyPointerValue: {
      auto ptr = reinterpret_cast<const OpenMfxRemoteProxy::OfxPropertyPointerValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyOfxPropertyValueVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyOfxPropertyValue(
        verifier,  values->Get(i), types->GetEnum<OfxPropertyValue>(i))) {
      return false;
    }
  }
  return true;
}

inline const OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe *GetOpenMfxRemoteProxyDescribe(const void *buf) {
  return flatbuffers::GetRoot<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe>(buf);
}

inline const OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe *GetSizePrefixedOpenMfxRemoteProxyDescribe(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe>(buf);
}

inline bool VerifyOpenMfxRemoteProxyDescribeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe>(nullptr);
}

inline bool VerifySizePrefixedOpenMfxRemoteProxyDescribeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe>(nullptr);
}

inline void FinishOpenMfxRemoteProxyDescribeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOpenMfxRemoteProxyDescribeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<OpenMfxRemoteProxy::OpenMfxRemoteProxyDescribe> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace OpenMfxRemoteProxy

#endif  // FLATBUFFERS_GENERATED_MESSAGES_OPENMFXREMOTEPROXY_H_
